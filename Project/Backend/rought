import { asyncHandler } from "../utils/asyncHandler.js";
import { User } from "../models/user.models.js";
import { ApiError } from "../utils/ApiError.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";

// Access and Refresh Tokens
const generateAccessAndRefreshTokens = async (userid) => {
  try {
    const user = await User.findById(userid);
    if (!user) {
      throw new ApiError(404, "User not found");
    }
    
    // Call the methods on the user instance
    const accessToken = user.generateAccessToken();
    const refreshToken = user.generateRefreshToken();
    
    user.refreshToken = refreshToken;
    await user.save({ validateBeforeSave: false });

    return { accessToken, refreshToken };
  } catch (error) {
    console.error("Error generating tokens:", error); // Log the error
    throw new ApiError(500, "Something went wrong while generating tokens");
  }
};


// Register Controller
const registerUser = asyncHandler(async (req, res) => {
  console.log(req.body)
  const { fullname, email, username, password } = req.body;
  console.log(fullname , "\n" , email  , "\n" ,username  , "\n" ,password)
  // Validate required fields
  if ([fullname, email, username, password].some((field) => !field?.trim())) {
    throw new ApiError(400, "Incomplete User credentials");
  }

  // Checking if user exists
  const existingUser = await User.findOne({
    $or: [{ username }, { email }],
  });
  if (existingUser) {
    throw new ApiError(409, "User already exists");
  }

  // Local path of avatar and cover image
  const avatarLocalPath = req.files?.avatar[0]?.path;
  const coverImageLocalPath = req.files?.coverImage[0]?.path;

  // Check if avatar is provided
  if (!avatarLocalPath) {
    throw new ApiError(400, "Avatar is required");
  }

  // Uploading to Cloudinary
  const avatar = await uploadOnCloudinary(avatarLocalPath);
  const coverImage = coverImageLocalPath
    ? await uploadOnCloudinary(coverImageLocalPath)
    : null;

  // Check if avatar upload was successful
  if (!avatar) {
    throw new ApiError(400, "Avatar upload failed");
  }

  // Creating user
  const user = await User.create({
    fullname,
    avatar: avatar.url,
    coverImage: coverImage?.url || "",
    email,
    password,
    username: username.toLowerCase(),
  });

  // Checking if user is created
  const createdUser = await User.findById(user._id).select(
    "-password -refreshToken"
  );
  if (!createdUser) {
    throw new ApiError(500, "We are having trouble creating your account");
  }

  res.status(201).json({
    success: true,
    user: createdUser,
  });
});

// Login Controller
const loginUser = asyncHandler(async (req, res) => {
  const { email, username, password } = req.body;

  // Find the user
  const user = await User.findOne({
    $or: [{ username }, { email }],
  });

  if (!user) {
    throw new ApiError(404, "User does not exist");
  }



  // Check for password validity
  const isPasswordValid = await user.isPasswordCorrect(password , user.password);
  if (!isPasswordValid) {
      throw new ApiError(401, "Invalid User Credentials");
  }

 
  // Generate access and refresh tokens
  const { accessToken, refreshToken } = await generateAccessAndRefreshTokens(
    user._id
  );
    

  const loggedInUser = await User.findById(user._id).select(
    "-password -refreshToken"
  );

  const options = {
    httpOnly: true,
    secure: process.env.NODE_ENV === "production", // Set secure flag based on environment
  };

  return res
    .status(200)
    .cookie("accessToken", accessToken, options)
    .cookie("refreshToken", refreshToken, options)
    .json({
      success: true,
      user: loggedInUser,
      accessToken,
      refreshToken,
      message: "User Logged In Successfully",
    });
});

// Logout User
const logoutUser = asyncHandler(async (req, res) => {
  await User.findByIdAndUpdate(
    req.user._id,
    {
      $set: {
        refreshToken: undefined,
      },
    },
    {
      new: true,
    }
  );
  const options = {
    httpOnly: true,
    secure: true
  };
  return res
    .status(200)
    .clearCookie("accessToken", options)
    .clearCookie("refreshToken", options)
    .json({ success: true, message: "User logged out successfully" });
});

export { registerUser, loginUser, logoutUser };

import mongoose from "mongoose"; // Import mongoose for ObjectId validation
import { asyncHandler } from "../utils/asyncHandler.js";
import { Product } from "../models/product.models.js";
import { Category } from "../models/category.models.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import { ApiError } from "../utils/ApiError.js";

// Fetching all the products
const getAllProducts = asyncHandler(async (req, res) => {
  try {
    console.log("Fetching all the products");
    const products = await Product.find().populate({
      path: "category",
      select: "name", // Only select the name field from the category
    });
    console.log(`Found ${products.length} products`);
    res.json(new ApiResponse(200, products, "All products are fetched successfully"));
  } catch (error) {
    console.log("Error in finding products", error);
    throw new ApiError(500, "Something went wrong while fetching products");
  }
});

// Fetching a single product by ID or name
const singleProduct = asyncHandler(async (req, res) => {
  const { idOrName } = req.params; // Get the parameter which can be ID or name

  try {
    let product;

    // Check if the parameter is a valid ObjectId
    if (mongoose.Types.ObjectId.isValid(idOrName)) {
      // If it's a valid ObjectId, search by ID
      product = await Product.findById(idOrName).populate({
        path: "category",
        select: "name", // Only select the name field from the category
      });
    } else {
      // If it's not a valid ObjectId, search by name
      product = await Product.findOne({ name: idOrName }).populate({
        path: "category",
        select: "name", // Only select the name field from the category
      });
    }

    // If no product is found, return an error
    if (!product) {
      console.log("Product not found");
      throw new ApiError(404, "Product not found");
    }

    res.status(200).json(product);
  } catch (error) {
    console.log("Error in finding product", error);
    throw new ApiError(500, "Something went wrong while fetching the product");
  }
});

// Creating a new product
const createProduct = asyncHandler(async (req, res) => {
  const { 
    name, 
    coverImage, 
    weight, 
    discount, 
    discountedPrice, 
    originalPrice, 
    categoryName, // Name of the category
    categoryCoverImage // Cover image for the category
  } = req.body;
  
  try {
    // Check if the category already exists by name
    let existingCategory = await Category.findOne({ name: categoryName });
    
    // If the category does not exist, create a new one
    if (!existingCategory) {
      console.log("The entered category does not exist. Let's create a new one.");
      existingCategory = new Category({
        name: categoryName,
        coverImage: categoryCoverImage, // Use the provided category cover image
      });
      await existingCategory.save();
    }

    // Create the new product with the existing or newly created category
    const newProduct = new Product({
      name,
      coverImage,
      weight,
      discount,
      discountedPrice,
      originalPrice,
      category: existingCategory._id, // Store the ObjectId of the category
    });
    
    const savedProduct = await newProduct.save();
    res.status(201).json(savedProduct);
  } catch (error) {
    console.log("Error in creating product", error);
    throw new ApiError(500, "Something went wrong while creating the product");
  }
});

// Update a previously existing product by ID or name
const updateProduct = asyncHandler(async (req, res) => {
  const { id } = req.params; // Get the ID from the request parameters
  const updateData = req.body; // Get the update data from the request body

  try {
    let product;

    // Check if the ID is a valid ObjectId
    if (mongoose.Types.ObjectId.isValid(id)) {
      // If it's a valid ObjectId, update by ID
      product = await Product.findByIdAndUpdate(id, updateData, {
        new: true,
      }).populate({
        path: "category",
        select: "name", // Only select the name field from the category
      });
    } else {
      // If it's not a valid ObjectId, try to find by name
      product = await Product.findOneAndUpdate(
        { name: id }, // Search by name
        updateData,
        { new: true }
      ).populate({
        path: "category",
        select: "name", // Only select the name field from the category
      });
    }

    if (!product) {
      throw new ApiError(404, "Product not found");
    }

    res.status(200).json(product);
  } catch (error) {
    console.log("Error in updating product", error);
    throw new ApiError(500, "Something went wrong while updating the product");
  }
});

// Delete a product by ID or name
const deleteProduct = asyncHandler(async (req, res) => {
  const { idOrName } = req.params; // Get the ID or name from the request parameters

  try {
    let deletedProduct;

    // Check if the ID is a valid ObjectId
    if (mongoose.Types.ObjectId.isValid(idOrName)) {
      // If it's a valid ObjectId, delete by ID
      deletedProduct = await Product.findByIdAndDelete(idOrName);
    } else {
      // If it's not a valid ObjectId, try to delete by name
      deletedProduct = await Product.findOneAndDelete({ name: idOrName });
    }

    if (!deletedProduct) {
      throw new ApiError(404, "Product not found");
    }

    res.status(200).json({ message: "Product has been deleted" });
  } catch (error) {
    console.log("Error in deleting product", error);
    throw new ApiError(500, "Something went wrong while deleting the product");
  }
});

export {
  getAllProducts,
  singleProduct,
  createProduct,
  updateProduct,
  deleteProduct,
};
